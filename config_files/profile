# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
# umask 022

DOTFILES_DIR=$HOME/dotfiles/dotfiles
SECURE_DOTFILES_DIR=$HOME/dotfiles/secure_dotfiles

###################################################################
############################## General ############################
###################################################################

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
			. "$HOME/.bashrc"
    fi
fi


# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$DOTFILES_DIR/scripts/usr:$PATH"

# Editor
export VISUAL="vim"
export EDITOR="$VISUAL"

# For info
source /etc/os-release

###################################################################
################### Applications / utilities ######################
###################################################################

## nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

## asdf
source $HOME/.asdf/asdf.sh

#### Go lang / GoLang
# Using GoEnv so no need for this
# export GOPATH=/usr/local/go
# export GOROOT=$HOME/.go/go
# export PATH=$PATH:$GOROOT/bin

#### Goenv
# Installation and upgrade: https://github.com/syndbg/goenv/blob/master/INSTALL.md
export GOENV_ROOT="$HOME/.goenv"
export PATH="$GOENV_ROOT/bin:$PATH"
eval "$(goenv init -)"
export PATH="$GOROOT/bin:$PATH"
export PATH="$PATH:$GOPATH/bin"


## rbenv
export PATH="$HOME/.rbenv/bin:$PATH"

# the fuck
eval $(thefuck --alias f)

###################################################################
####################### Configurations ############################
###################################################################

################ Docker ####################
# docker-compose timeout
export COMPOSE_HTTP_TIMEOUT=3000000000
export DOCKER_BUILDKIT=1

# for pipenv
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8


############# Anaconda ####################
# Installation:: https://docs.anaconda.com/free/anaconda/install/linux/
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
function activateConda() {
	__conda_setup="$('$HOME/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
	    eval "$__conda_setup"
	else
	    if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
	        . "$HOME/anaconda3/etc/profile.d/conda.sh"
	    else
	        export PATH="$HOME/anaconda3/bin:$PATH"
	    fi
	fi
	unset __conda_setup
}
# <<< conda initialize <<<

export PATH="$HOME/anaconda3/bin:$PATH"


##################### portainer ##################
function _start_portainer () {
	docker volume inspect portainer_data >/dev/null || docker volume create portainer_data
	docker run --rm -d -p 8080:8000 -p 9000:9000 --name=portainer --rm -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce
}
alias start_portainer="_start_portainer"
alias stop_portainer="docker stop portainer"



###########################################################
########################### ZSH ###########################
###########################################################

# disable auto correct
unsetopt correct_all
unsetopt correct

# If found in a directory, ZSH sources it.
export ZSH_DOTENV_FILE=.dotenv

## nvm auto-switch node version if `.nvmrc` file is found
autoload -U add-zsh-hook
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# direnv
eval "$(direnv hook zsh)"

# alias-tips plugin for zsh
# export ZSH_PLUGINS_ALIAS_TIPS_EXPAND=0

############################################
############# zsh theme ####################
############################################

# have to source oh-my-zsh.sh if theme is changed in this file. Otherwise
# set theme in ~/.zshrc
# ZSH_THEME="powerlevel10k/powerlevel10k"
# source $ZSH/oh-my-zsh.sh

################## Powerline10k #######################
# https://github.com/romkatv/powerlevel10k
# UNCOMMENT if powerlevel10k theme is set.
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

################### Spaceship #######################
export SPACESHIP_CONFIG="$HOME/dotfiles/dotfiles/config_files/zsh_themes/spaceship.zsh"


###########################################################
##################### System specific #####################
###########################################################

# Load the system specific profile variables
SYSTEM=$(uname -s)

if [ "$SYSTEM" = "Linux" ]; then
	# Linux specific settings here

	# For rust and cargo
	source $HOME/.cargo/env

	# go
	export PATH=$PATH:/usr/local/go/bin

	# android sdk tools
	export ANDROID_HOME=$HOME/Android/sdk
	export PATH=$ANDROID_HOME/platform-tools:$PATH
	export PATH=$ANDROID_HOME/tools:$PATH

	# pyenv
	export PATH=$HOME/.pyenv/bin:$PATH
	eval "$(pyenv init -)"
	eval "$(pyenv init --path)"
	eval "$(pyenv virtualenv-init -)"

	# only for gnome
	# to show snap apps in overview
	export XDG_DATA_DIRS="${XDG_DATA_DIRS}:/var/lib/snapd/desktop"

	# Dotnet
	export PATH=$HOME/.dotnet/tools:$PATH
	export PATH=$HOME/.dotnet:$PATH
	export DOTNET_ROOT=$HOME/.dotnet
	export DOTNET_CLI_TELEMETRY_OPTOUT=1

	# Homebrew (Linux)
	eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	export HOMEBREW_NO_ANALYTICS=1

	# AppImages
	export PATH=$PATH:$HOME/progs/app-images

else # MacOS
	# Mac specific settings here

	######### vscode mac #############
	export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

	########### mysql_mac ##############
	export PATH=$PATH:/usr/local/mysql/bin

	########### Android SDK #####################
	export ANDROID_HOME=$HOME/Library/Android/sdk
	export PATH=$PATH:$ANDROID_HOME/emulator
	export PATH=$PATH:$ANDROID_HOME/platform-tools
	export PATH=$PATH:$ANDROID_HOME/tools
	export PATH=$PATH:$ANDROID_HOME/tools/bin

	############### PyENV ######################
	# export PYENV_ROOT="$HOME/.pyenv
	# export PATH="$PYENV_ROOT/bin:$PATH

	if command -v pyenv 1>/dev/null 2>&1; then
		eval "$(pyenv init -)"
	fi

fi


###################################################################
####################### Last steps ############################
###################################################################

#### Env
source $SECURE_DOTFILES_DIR/config_files/shared.env

#### Source scripts
source $DOTFILES_DIR/scripts/utils/helpers.sh
source $SECURE_DOTFILES_DIR/scripts/helpers.sh

### Tilix vte activation
source /etc/profile.d/vte-2.91.sh
