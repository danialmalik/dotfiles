# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
# umask 022

DOTFILES_DIR=$HOME/dotfiles/dotfiles
SECURE_DOTFILES_DIR=$HOME/dotfiles/secure_dotfiles

###################################################################
############################## General ############################
###################################################################

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
			. "$HOME/.bashrc"
    fi
fi


# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$DOTFILES_DIR/scripts/usr:$PATH"

# Editor
export VISUAL="vim"
export EDITOR="$VISUAL"

###################################################################
################### Applications / utilities ######################
###################################################################

## nvm
if [ -d "$HOME/.nvm" ]; then
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

fi

load-nvmrc() {
	local node_version="$(nvm version)"
	local nvmrc_path="$(nvm_find_nvmrc)"

	if [ -n "$nvmrc_path" ]; then
		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		if [ "$nvmrc_node_version" = "N/A" ]; then
		nvm install
		elif [ "$nvmrc_node_version" != "$node_version" ]; then
		nvm use
		fi
	elif [ "$node_version" != "$(nvm version default)" ]; then
		echo "Reverting to nvm default version"
		nvm use default
	fi
}

## asdf
if [ -d "$HOME/.asdf" ]; then
	source $HOME/.asdf/asdf.sh
fi

#### Go lang / GoLang
# Using GoEnv so no need for this
# export GOPATH=/usr/local/go
# export GOROOT=$HOME/.go/go
# export PATH=$PATH:$GOROOT/bin

#### Goenv
# Installation and upgrade: https://github.com/syndbg/goenv/blob/master/INSTALL.md
if [ -d "$HOME/.goenv" ]; then
	export GOENV_ROOT="$HOME/.goenv"
	export PATH="$GOENV_ROOT/bin:$PATH"
	eval "$(goenv init -)"
	export PATH="$GOROOT/bin:$PATH"
	export PATH="$PATH:$GOPATH/bin"
fi

## rbenv
if [ -d "$HOME/.rbenv" ]; then
	export PATH="$HOME/.rbenv/bin:$PATH"
fi


###################################################################
####################### Configurations ############################
###################################################################

################ Docker ####################
# docker-compose timeout
export COMPOSE_HTTP_TIMEOUT=3000000000
export DOCKER_BUILDKIT=1

# for pipenv
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8


############## Terraform ###################
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

############# Anaconda ####################
# # Installation:: https://docs.anaconda.com/free/anaconda/install/linux/
# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# function activateConda() {
# 	__conda_setup="$('$HOME/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# 	if [ $? -eq 0 ]; then
# 	    eval "$__conda_setup"
# 	else
# 	    if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
# 	        . "$HOME/anaconda3/etc/profile.d/conda.sh"
# 	    else
# 	        export PATH="$HOME/anaconda3/bin:$PATH"
# 	    fi
# 	fi
# 	unset __conda_setup
# }
# # <<< conda initialize <<<

# export PATH="$HOME/anaconda3/bin:$PATH"

###########################################################
########################### ZSH ###########################
###########################################################

# disable auto correct
unsetopt correct_all
unsetopt correct

# If found in a directory, ZSH sources it.
export ZSH_DOTENV_FILE=.dotenv

## nvm auto-switch node version if `.nvmrc` file is found
autoload -U add-zsh-hook
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# direnv
eval "$(direnv hook zsh)"

# alias-tips plugin for zsh
# export ZSH_PLUGINS_ALIAS_TIPS_EXPAND=0

######################## zsh theme

# have to source oh-my-zsh.sh if theme is changed in this file. Otherwise
# set theme in ~/.zshrc

# ZSH_THEME="powerlevel10k/powerlevel10k"
# source $ZSH/oh-my-zsh.sh

######################## apps
# HSTR configuration - add this to ~/.zshrc
alias hh=hstr                    # hh to be alias for hstr
setopt histignorespace           # skip cmds w/ leading space from history
export HSTR_CONFIG=hicolor       # get more colors
# bindkey -s "\C-r" "\C-a hstr -- \C-j"     # bind hstr to Ctrl-r (for Vi mode check doc)

###########################################################
##################### System specific #####################
###########################################################

# Load the system specific profile variables
SYSTEM=$(uname -s)

if [ "$SYSTEM" = "Linux" ]; then
	source $DOTFILES_DIR/config_files/linux/profile.sh
else # MacOS
	source $DOTFILES_DIR/config_files/macos/profile.sh

fi


###################################################################
####################### Last steps ############################
###################################################################

#### Env
source $SECURE_DOTFILES_DIR/env_files/shared.env

#### Source scripts
source $DOTFILES_DIR/scripts/utils/common/helpers.sh

source $SECURE_DOTFILES_DIR/scripts/helpers.sh
